{"version":3,"sources":["data/dataStore.js","framework/element.js","framework/render.js","data/jokesData.js","components/JokeText/JokeText.js","components/LoadIcon/LoadIcon.js","components/JokeBlock/JokeBlock.js","components/Button/Button.js","components/RadioButton/RadioButton.js","components/TypeSwitch/TypeSwitch.js","components/Counter/Counter.js","components/App.js","data/jokeAPI.js","index.js"],"names":["dataStore","setupShown","currentJoke","jokeText","jokesShown","jokesType","shownIds","error","isDataLoading","createElement","tag","props","children","element","DocumentFragment","document","Object","entries","forEach","name","value","startsWith","toLowerCase","window","addEventListener","substr","includes","removeAttribute","classList","split","filter","Boolean","add","setAttribute","e","console","child","appendChild","parent","Array","isArray","subChild","nodeType","createTextNode","toString","createFragment","Component","Target","renderApp","componentFunction","targetElementId","innerHTML","setNewRandomJoke","newJoke","id","getRandomJoke","setup","setJokeContent","content","isNewJokeLoaded","punchline","setJokesType","inputValue","setJokePunchLine","JokeText","style","LoadIcon","loadIcon","progLoadIcon","generalLoadIcon","JokeBlock","jokeContainer","programming","Button","handleClick","textContent","button","RadioButton","type","category","handleChange","checked","currentTarget","label","TypeSwitch","fieldset","title","map","Counter","text","App","app","themeDark","themeLight","getRandomJokeUrl","jokeType","url","response","fetch","result","json","module","hot","accept","changeJokesType","getElementById"],"mappings":"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","file":"src.2433fcf1.js","sourceRoot":"..\\src","sourcesContent":["const dataStore = {\n  setupShown: false,\n  currentJoke: '',\n  jokeText: '',\n  jokesShown: 0,\n  jokesType: 'general',\n  shownIds: [],\n  error: null,\n  isDataLoading: false,\n};\n\nexport default dataStore;\n","/**\n * Creates DOM Node. Implements jsx-parser's createElement API\n * @param {string|Function} tag - HTML tag as string or Component function\n * @param {object} props - element properties as parsed by jsx-parser\n * @param {Node[]} children - child elements\n * @returns {DocumentFragment|Element}\n */\nexport const createElement = (tag, props, ...children) => {\n  if (typeof tag === 'function') {\n    /*\n      Passing children as the 2nd argument is required as jsx transformer puts component functions\n      and regular tags in wrapper functions that expect children as the 2nd param\n     */\n    return tag({ ...props, children }, children);\n  }\n  const element = tag === '' ? new DocumentFragment() : document.createElement(tag);\n  Object.entries(props || {}).forEach(([name, value]) => {\n    if (name.startsWith('on') && name.toLowerCase() in window) {\n      element.addEventListener(\n        name.toLowerCase().substr(2),\n        /** @type {Function} */\n        value,\n      );\n    } else {\n      try {\n        if (!(element instanceof DocumentFragment)) {\n          // Boolean attributes are considered to be true if they're present on the element at all, regardless of their actual value\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute#example\n          if (['disabled', 'checked'].includes(name) && !value) {\n            element.removeAttribute(name);\n          } else if (name.toLowerCase() === 'classname') {\n            // We want to treat both strings and arrays in a similar manner\n            const classList = typeof value === 'string' ? value.split(' ').filter(Boolean) : value;\n            element.classList.add(...classList);\n          } else {\n            element.setAttribute(\n              name,\n              /** @type {string} */\n              value,\n            );\n          }\n        }\n      } catch (e) {\n        console.error('createElement caught', e, 'on', element);\n      }\n    }\n  });\n\n  children.forEach(child => appendChild(element, child));\n\n  return element;\n};\n\n/**\n * Appends child elements from an unbound array of children, recursively\n * @param {Node} parent\n * @param {Node|[Node]} child\n */\nconst appendChild = (parent, child) => {\n  if (Array.isArray(child)) {\n    child.forEach(subChild => appendChild(parent, subChild));\n  } else {\n    // Skip null and undefined\n    if (child != null) {\n      parent.appendChild(child.nodeType ? child : document.createTextNode(child.toString()));\n    }\n  }\n};\n\n/**\n * Creates Fragment. Implements jsx-parser's createFragment API\n * @param {object} props - effectively a placeholder, fragment never has any properties\n * @param {Node[]} children - child elements\n * @returns {DocumentFragment}\n */\nexport const createFragment = (props, ...children) => createElement('', props, ...children);\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement } from './element';\nlet Component, Target;\n\nexport default function renderApp(componentFunction = null, targetElementId = null) {\n  if (componentFunction) Component = componentFunction;\n  if (targetElementId) Target = targetElementId;\n\n  Target.innerHTML = '';\n  Target.appendChild(<Component />);\n}\n","import dataStore from '../data/dataStore';\nimport renderApp from '../framework/render';\n\nexport async function setNewRandomJoke() {\n  dataStore.isDataLoading = true;\n  let newJoke;\n  while (!newJoke || dataStore.shownIds.includes(newJoke.id)) {\n    renderApp();\n    [newJoke] = await getRandomJoke(dataStore.jokesType);\n  }\n  dataStore.shownIds = [...dataStore.shownIds, newJoke.id];\n  dataStore.currentJoke = newJoke;\n  dataStore.jokeText = dataStore.currentJoke.setup;\n  dataStore.setupShown = true;\n  dataStore.isDataLoading = false;\n  dataStore.jokesShown++;\n  renderApp();\n}\n\nexport function setJokeContent(jokeText) {\n  let content = jokeText || 'Click the button to get a joke!';\n\n  if (dataStore.error) {\n    content = dataStore.error;\n  }\n\n  if (isNewJokeLoaded()) {\n    content = jokeText;\n  }\n\n  return content;\n}\n\nexport function isNewJokeLoaded() {\n  return dataStore.jokeText && dataStore.currentJoke.punchline !== dataStore.jokeText;\n}\n\nexport function setJokesType(inputValue) {\n  dataStore.jokesType = inputValue;\n  renderApp();\n}\n\nexport function setJokePunchLine() {\n  dataStore.jokeText = dataStore.currentJoke.punchline;\n  dataStore.setupShown = false;\n  renderApp();\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport style from './JokeText.css';\n\nexport default function JokeText({ jokeText }) {\n  return <p className={style.jokeText}>{jokeText}</p>;\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport generalLoadIcon from './icons/load_general.gif';\nimport progLoadIcon from './icons/load_prog.gif';\nimport style from './LoadIcon.css';\n\nexport default function LoadIcon({ jokesType }) {\n  return (\n    <>\n      <img\n        className={style.loadIcon}\n        src={jokesType === 'programming' ? progLoadIcon : generalLoadIcon}\n        alt=\"loading\"\n      />\n    </>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport JokeText from '../JokeText/JokeText';\nimport style from './JokeBlock.css';\nimport LoadIcon from '../LoadIcon/LoadIcon';\n\nexport default function JokeBlock({ jokeText, jokesType }) {\n  return (\n    <div className={`${style.jokeContainer} ${jokesType === 'programming' && style.programming}`}>\n      {dataStore.isDataLoading ? (\n        <LoadIcon jokesType={jokesType} />\n      ) : (\n        <JokeText jokeText={jokeText} />\n      )}\n    </div>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport { setJokePunchLine, setNewRandomJoke } from '../../data/jokesData';\nimport style from './Button.css';\n\nexport default function Button({ setup }) {\n  const handleClick = setup ? setJokePunchLine : setNewRandomJoke;\n  const textContent = setup ? 'Punchline' : 'New joke';\n\n  return (\n    <button className={style.button} onclick={() => handleClick()}>\n      {textContent}\n    </button>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport style from './RadioButton.css';\n\nexport default function RadioButton({ name, type, category, handleChange, checked }) {\n  return (\n    <>\n      <input\n        id={category}\n        type={type}\n        name={name}\n        onchange={e => handleChange(e.currentTarget.id)}\n        checked={checked}\n      />\n      <label className={style.label} For={category}>\n        {category}\n      </label>\n    </>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport { setJokesType } from '../../data/jokesData';\nimport RadioButton from '../RadioButton/RadioButton';\nimport style from './TypeSwitch.css';\n\nexport default function TypeSwitch({ jokesType }) {\n  return (\n    <fieldset className={style.fieldset}>\n      <legend className={style.title}>Choose jokes category:</legend>\n      <div>\n        {['general', 'programming'].map(category => (\n          <RadioButton\n            type=\"radio\"\n            category={category}\n            name=\"jokes-type\"\n            handleChange={setJokesType}\n            checked={jokesType === category}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport style from './Counter.css';\n\nexport default function Counter({ jokesShown }) {\n  return <p className={style.text}>Already read jokes: {jokesShown}</p>;\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../framework/element';\nimport style from './App.css';\nimport dataStore from '../data/dataStore';\nimport { setJokeContent } from '../data/jokesData';\nimport JokeBlock from './JokeBlock/JokeBlock';\nimport Button from './Button/Button';\nimport TypeSwitch from './TypeSwitch/TypeSwitch';\nimport Counter from './Counter/Counter';\n\nfunction App() {\n  const jokeText = setJokeContent(dataStore.jokeText);\n\n  return (\n    <div\n      className={`${style.app} ${\n        dataStore.jokesType === 'programming' ? style.themeDark : style.themeLight\n      }`}\n    >\n      <h1 className={style.title}>Good Mood App</h1>\n      <TypeSwitch jokesType={dataStore.jokesType} />\n      <JokeBlock jokeText={jokeText} jokesType={dataStore.jokesType} />\n      <Button setup={dataStore.setupShown} />\n      <Counter jokesShown={dataStore.jokesShown} />\n    </div>\n  );\n}\n\nexport default App;\n","function getRandomJokeUrl(jokeType) {\n  return `https://official-joke-api.appspot.com/jokes/${jokeType}/random`;\n}\n\nexport async function getRandomJoke(jokeType) {\n  const url = getRandomJokeUrl(jokeType);\n  try {\n    const response = await fetch(url);\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    dataStore.error = error;\n  }\n}\n\nexport default getRandomJoke;\n","import dataStore from './data/dataStore';\nimport App from './components/App';\nimport renderApp from './framework/render';\nimport { setJokePunchLine, changeJokesType, setNewRandomJoke } from './data/jokesData';\nimport getRandomJoke from './data/jokeAPI';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nwindow.dataStore = dataStore;\nwindow.renderApp = renderApp;\nwindow.setJokePunchLine = setJokePunchLine;\nwindow.setNewRandomJoke = setNewRandomJoke;\nwindow.changeJokesType = changeJokesType;\nwindow.getRandomJoke = getRandomJoke;\n\nrenderApp(App, document.getElementById('app-root'));\n"]}