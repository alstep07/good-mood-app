{"version":3,"sources":["data/dataStore.js","data/jokesData.js","components/JokeText.js","components/LoadIcon.js","components/JokeBlock.js","components/Button.js","components/TypeSwitch.js","components/Counter.js","components/App.js","framework/render.js","data/jokeAPI.js","index.js"],"names":["dataStore","setupShown","currentJoke","jokeText","jokesShown","jokesType","shownIds","error","isDataLoading","setNewRandomJoke","newJoke","includes","id","renderApp","getRandomJoke","setup","setJokeContent","content","isNewJokeLoaded","punchline","changeJokesType","inputValue","setJokePunchLine","JokeText","style","LoadIcon","loadIcon","progLoadIcon","generalLoadIcon","JokeBlock","jokeType","jokeContainer","programming","Button","button","TypeSwitch","map","type","join","Counter","App","jokeContent","app","appTitle","document","getElementById","innerHTML","getRandomJokeUrl","url","response","fetch","result","json","module","hot","accept","window"],"mappings":"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","file":"src.0a6c88c9.js","sourceRoot":"..\\src","sourcesContent":["const dataStore = {\n  setupShown: false,\n  currentJoke: '',\n  jokeText: '',\n  jokesShown: 0,\n  jokesType: 'general',\n  shownIds: [],\n  error: null,\n  isDataLoading: false,\n};\n\nexport default dataStore;\n","export async function setNewRandomJoke() {\n  dataStore.isDataLoading = true;\n  let newJoke;\n  while (!newJoke || dataStore.shownIds.includes(newJoke.id)) {\n    renderApp();\n    [newJoke] = await getRandomJoke(dataStore.jokesType);\n  }\n  dataStore.shownIds = [...dataStore.shownIds, newJoke.id];\n  dataStore.currentJoke = newJoke;\n  dataStore.jokeText = dataStore.currentJoke.setup;\n  dataStore.setupShown = true;\n  dataStore.isDataLoading = false;\n  dataStore.jokesShown++;\n  renderApp();\n}\n\nexport function setJokeContent(jokeText) {\n  let content = jokeText || 'Click the button to get a joke!';\n\n  if (dataStore.error) {\n    content = dataStore.error;\n  }\n\n  if (isNewJokeLoaded()) {\n    content = jokeText;\n  }\n\n  return content;\n}\n\nexport function isNewJokeLoaded() {\n  return dataStore.jokeText && dataStore.currentJoke.punchline !== dataStore.jokeText;\n}\n\nexport function changeJokesType(inputValue) {\n  dataStore.jokesType = inputValue;\n}\n\nexport function setJokePunchLine() {\n  dataStore.jokeText = dataStore.currentJoke.punchline;\n  dataStore.setupShown = false;\n  renderApp();\n}\n","import style from './JokeText.css';\n\nexport default function JokeText(jokeText) {\n  return `\n    <p class=\"${style.jokeText}\">${jokeText}</p>\n  `;\n}\n","import generalLoadIcon from '../assets/icons/load_general.gif';\nimport progLoadIcon from '../assets/icons/load_prog.gif';\nimport style from './LoadIcon.css';\n\nexport default function LoadIcon() {\n  return `\n    <img\n      class=\"${style.loadIcon}\"\n      src=\"${dataStore.jokesType === 'programming' ? progLoadIcon : generalLoadIcon}\"\n      alt=\"loading\">\n  `;\n}\n","import JokeText from './JokeText';\nimport style from './JokeBlock.css';\nimport LoadIcon from './LoadIcon';\n\nexport default function JokeBlock(jokeText, jokeType) {\n  return `\n    <div class=\"${style.jokeContainer} ${jokeType === 'programming' && style.programming}\">\n      ${dataStore.isDataLoading ? LoadIcon() : JokeText(jokeText)}\n    </div>`;\n}\n","import style from './Button.css';\n\nexport default function Button(setup) {\n  return setup\n    ? `<button class=\"${style.button}\" onclick=\"(${setJokePunchLine})()\">Punchline</button>`\n    : `<button class=\"${style.button}\" onclick=\"(${setNewRandomJoke})()\">Get a joke</button>`;\n}\n","export default function TypeSwitch() {\n  const typeInputComponents = ['general', 'programming']\n    .map(\n      type =>\n        `<label>\n            <input\n            id='${type}'\n            type='radio'\n            name='jokes-type'\n            onchange='(${changeJokesType})(this.id);'\n            ${dataStore.jokesType === type ? 'checked' : ''}>\n            ${type}\n          </label>\n        `,\n    )\n    .join('');\n\n  return `\n    <p>Choose jokes category:</p>\n    ${typeInputComponents}\n  `;\n}\n","export default function Counter(jokesShown) {\n  return `<p>Already read jokes: ${jokesShown}</p>`;\n}\n","import style from '../style.css';\nimport dataStore from '../data/dataStore';\nimport { setJokeContent } from '../data/jokesData';\nimport JokeBlock from './JokeBlock';\nimport Button from './Button';\nimport TypeSwitch from './TypeSwitch';\nimport Counter from './Counter';\n\nfunction App() {\n  const jokeContent = setJokeContent(dataStore.jokeText);\n\n  return `\n    <div class=\"${style.app}\">\n      <h1 class=${style.appTitle}>Good Mood App</h1>\n      ${TypeSwitch()}\n      ${JokeBlock(jokeContent, dataStore.jokesType)}\n      ${Button(dataStore.setupShown)}\n      ${Counter(dataStore.jokesShown)}\n    </div>\n  `;\n}\n\nexport default App;\n","import App from '../components/App';\n\nfunction renderApp() {\n  document.getElementById('app-root').innerHTML = `\n    ${App()}\n  `;\n}\n\nexport default renderApp;\n","function getRandomJokeUrl(jokeType) {\n  return `https://official-joke-api.appspot.com/jokes/${jokeType}/random`;\n}\n\nexport async function getRandomJoke(jokeType) {\n  const url = getRandomJokeUrl(jokeType);\n  try {\n    const response = await fetch(url);\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    dataStore.error = error;\n  }\n}\n\nexport default getRandomJoke;\n","/* eslint-disable no-console */\nimport dataStore from './data/dataStore';\nimport App from './components/App';\nimport renderApp from './framework/render';\nimport { setJokePunchLine, changeJokesType, setNewRandomJoke } from './data/jokesData';\nimport getRandomJoke from './data/jokeAPI';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nwindow.dataStore = dataStore;\nwindow.renderApp = renderApp;\nwindow.setJokePunchLine = setJokePunchLine;\nwindow.setNewRandomJoke = setNewRandomJoke;\nwindow.changeJokesType = changeJokesType;\nwindow.getRandomJoke = getRandomJoke;\n\ndocument.getElementById('app-root').innerHTML = App(dataStore);\n"]}