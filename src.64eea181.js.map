{"version":3,"sources":["utils.js","framework/hooks.js","framework/element.js","framework/render.js","framework/index.js","components/Title/Title.js","components/JokeText/JokeText.js","components/LoadIcon/LoadIcon.js","components/JokeBlock/JokeBlock.js","components/Button/Button.js","components/RadioButton/RadioButton.js","components/TypeSwitch/TypeSwitch.js","components/Counter/Counter.js","components/App.js","index.js"],"names":["isFunction","func","current","shouldReRender","wipComponent","hookIndex","createFunctionElement","tag","props","children","hooks","useState","initial","oldHook","hook","state","queue","forEach","action","push","useEffect","effect","deps","oldDeps","undefined","hasDepsChanged","unmount","window","removeEventListener","addEventListener","prevDeps","nextDeps","length","some","dep","index","useContext","Context","value","createElement","element","DocumentFragment","document","Object","entries","name","startsWith","toLowerCase","substr","includes","removeAttribute","setAttribute","e","console","error","child","appendChild","parent","Array","isArray","subChild","nodeType","createTextNode","toString","createFragment","render","timer","Component","target","requestAnimationFrame","workLoop","replaceChildren","cancelAnimationFrame","Title","text","style","title","JokeText","jokeText","LoadIcon","jokesType","loadIcon","progLoadIcon","generalLoadIcon","JokeBlock","jokeType","dataLoading","jokeContainer","Button","handleClick","button","RadioButton","type","handleSwitch","checked","currentTarget","id","label","TypeSwitch","types","legend","currentType","fieldset","inputs","map","Counter","jokesShown","App","setJokeType","content","setContent","setJokesShown","setupShown","setSetupShown","setDataLoading","theme","setTheme","joke","setJoke","setError","getRandomJokeUrl","updateContent","setup","newContent","punchline","newJoke","url","response","fetch","result","json","getRandomJoke","app","themeDark","themeLight","configBar","module","hot","accept","getElementById"],"mappings":"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","file":"src.64eea181.js","sourceRoot":"..\\src","sourcesContent":["export const isFunction = func => typeof func === 'function';\n","import { isFunction } from '../utils';\n\nexport const current = {\n  shouldReRender: true,\n  wipComponent: null,\n  hookIndex: null,\n};\n\nexport function createFunctionElement(tag, props, children) {\n  current.wipComponent = tag;\n  current.hookIndex = 0;\n  current.wipComponent.hooks = current.wipComponent.hooks || [];\n  return tag({ ...props, children }, children);\n}\n\nexport function useState(initial) {\n  const { wipComponent, hookIndex } = current;\n  const oldHook = wipComponent.hooks[hookIndex];\n  const hook = {\n    state: oldHook ? oldHook.state : initial,\n    queue: [],\n  };\n\n  const actions = oldHook ? oldHook.queue : [];\n  actions.forEach(action => {\n    hook.state = isFunction(action) ? action(hook.state) : action;\n  });\n\n  const setState = action => {\n    current.shouldReRender = true;\n    hook.queue.push(action);\n  };\n\n  wipComponent.hooks[hookIndex] = hook;\n  current.hookIndex++;\n  return [hook.state, setState];\n}\n\nexport function useEffect(effect, deps) {\n  const { wipComponent, hookIndex } = current;\n  const oldHook = wipComponent.hooks[hookIndex];\n  const oldDeps = oldHook ? oldHook.deps : undefined;\n\n  const hasChanged = hasDepsChanged(oldDeps, deps);\n\n  if (!hasChanged) return;\n\n  if (oldHook && oldHook.unmount) {\n    window.removeEventListener('beforeunload', oldHook.unmount);\n  }\n\n  wipComponent.hooks[hookIndex] = {\n    unmount: effect(),\n    deps,\n  };\n  window.addEventListener('beforeunload', wipComponent.hooks[hookIndex].unmount);\n  current.hookIndex++;\n}\n\nconst hasDepsChanged = (prevDeps, nextDeps) =>\n  !prevDeps ||\n  !nextDeps ||\n  prevDeps.length !== nextDeps.length ||\n  prevDeps.some((dep, index) => dep !== nextDeps[index]);\n\nexport const useContext = Context => Context.value;\n","/**\n * Creates DOM Node. Implements jsx-parser's createElement API\n * @param {string|Function} tag - HTML tag as string or Component function\n * @param {object} props - element properties as parsed by jsx-parser\n * @param {Node[]} children - child elements\n * @returns {DocumentFragment|Element}\n */\n/** @jsx createElement */\n/*** @jsxFrag createFragment */\nimport { createFunctionElement } from './hooks';\nimport { isFunction } from '../utils';\n\nexport const createElement = (tag, props, ...children) => {\n  if (isFunction(tag)) {\n    /*\n      Passing children as the 2nd argument is required as jsx transformer puts component functions\n      and regular tags in wrapper functions that expect children as the 2nd param\n     */\n    return createFunctionElement(tag, props, children);\n  }\n  const element = tag === '' ? new DocumentFragment() : document.createElement(tag);\n  Object.entries(props || {}).forEach(([name, value]) => {\n    if (name.startsWith('on') && name.toLowerCase() in window) {\n      element.addEventListener(\n        name.toLowerCase().substr(2),\n        /** @type {Function} */\n        value,\n      );\n    } else {\n      try {\n        if (!(element instanceof DocumentFragment)) {\n          // Boolean attributes are considered to be true if they're present on the element at all, regardless of their actual value\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute#example\n          if (['disabled', 'checked'].includes(name) && !value) {\n            element.removeAttribute(name);\n          } else {\n            element.setAttribute(name, value);\n          }\n        }\n      } catch (e) {\n        console.error('createElement caught', e, 'on', element);\n      }\n    }\n  });\n\n  children.forEach(child => appendChild(element, child));\n\n  return element;\n};\n\n/**\n * Appends child elements from an unbound array of children, recursively\n * @param {Node} parent\n * @param {Node|[Node]} child\n */\nconst appendChild = (parent, child) => {\n  if (Array.isArray(child)) {\n    child.forEach(subChild => appendChild(parent, subChild));\n  } else {\n    // Skip null and undefined\n    if (child != null) {\n      parent.appendChild(child.nodeType ? child : document.createTextNode(child.toString()));\n    }\n  }\n};\n\n/**\n * Creates Fragment. Implements jsx-parser's createFragment API\n * @param {object} props - effectively a placeholder, fragment never has any properties\n * @param {Node[]} children - child elements\n * @returns {DocumentFragment}\n */\nexport const createFragment = (props, ...children) => createElement('', props, ...children);\n","/** @jsx createElement */\n/*** @jsxFrag createFragment */\nimport { createElement } from './element';\nimport { current } from './hooks';\n\n/**\n * Renders a component and attaches it to the target DOM element\n * @param Component - function\n * @param target - DOM element to attach component to\n */\n\nlet timer;\n\nexport function render(Component, target) {\n  function workLoop() {\n    if (current.shouldReRender) {\n      current.shouldReRender = false;\n      target.replaceChildren(<Component />);\n    }\n\n    cancelAnimationFrame(timer);\n    timer = requestAnimationFrame(workLoop);\n  }\n  timer = requestAnimationFrame(workLoop);\n}\n\nexport default render;\n","import { createElement, createFragment } from './element';\nimport { render } from './render';\nimport { useState, useEffect } from './hooks';\n\nexport { createElement, createFragment } from './element';\nexport { render } from './render';\nexport { useState, useEffect } from './hooks';\n\nexport default {\n  createElement,\n  createFragment,\n  useState,\n  useEffect,\n  render,\n};\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement } from '../../framework';\nimport style from './Title.css';\n\nexport default function Title({ text }) {\n  return <h1 class={style.title}>{text}</h1>;\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport style from './JokeText.css';\n\nexport default function JokeText({ jokeText }) {\n  return <p class={style.jokeText}>{jokeText}</p>;\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport generalLoadIcon from './icons/load_general.gif';\nimport progLoadIcon from './icons/load_prog.gif';\nimport style from './LoadIcon.css';\n\nexport default function LoadIcon({ jokesType }) {\n  return (\n    <>\n      <img\n        className={style.loadIcon}\n        src={jokesType === 'programming' ? progLoadIcon : generalLoadIcon}\n        alt=\"loading\"\n      />\n    </>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement } from '../../framework';\nimport JokeText from '../JokeText/JokeText';\nimport style from './JokeBlock.css';\nimport LoadIcon from '../LoadIcon/LoadIcon';\n\nexport default function JokeBlock({ jokeText, jokeType, dataLoading }) {\n  return (\n    <div class={style.jokeContainer}>\n      {dataLoading ? <LoadIcon jokesType={jokeType} /> : <JokeText jokeText={jokeText} />}\n    </div>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement } from '../../framework/element';\nimport style from './Button.css';\n\nexport default function Button({ text, handleClick }) {\n  return (\n    <button class={style.button} onclick={() => handleClick()}>\n      {text}\n    </button>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport style from './RadioButton.css';\n\nexport default function RadioButton({ type, value, name, handleSwitch, checked }) {\n  return (\n    <>\n      <input\n        id={value}\n        type={type}\n        name={name}\n        onchange={e => handleSwitch(e.currentTarget.id)}\n        checked={checked}\n      />\n      <label class={style.label} For={value}>\n        {value}\n      </label>\n    </>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement } from '../../framework';\nimport RadioButton from '../RadioButton/RadioButton';\nimport style from './TypeSwitch.css';\n\nexport default function TypeSwitch({ handleSwitch, types, legend, name, currentType }) {\n  return (\n    <fieldset class={style.fieldset}>\n      <legend class={style.title}>{legend}</legend>\n      <div class={style.inputs}>\n        {types.map(type => (\n          <RadioButton\n            type=\"radio\"\n            value={type}\n            name={name}\n            handleSwitch={handleSwitch}\n            checked={type === currentType}\n          />\n        ))}\n      </div>\n    </fieldset>\n  );\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, createFragment } from '../../framework/element';\nimport style from './Counter.css';\n\nexport default function Counter({ jokesShown }) {\n  return <p class={style.text}>Already read jokes: {jokesShown}</p>;\n}\n","/** @jsx createElement */\n/** @jsxFrag createFragment */\nimport { createElement, useState, useEffect } from '../framework';\nimport style from './App.css';\nimport Title from '../components/Title/Title';\nimport JokeBlock from './JokeBlock/JokeBlock';\nimport Button from './Button/Button';\nimport TypeSwitch from './TypeSwitch/TypeSwitch';\nimport Counter from './Counter/Counter';\n\nfunction App() {\n  const [jokeType, setJokeType] = useState('general');\n  const [content, setContent] = useState('Click the button to get a joke!');\n  const [jokesShown, setJokesShown] = useState(0);\n  const [setupShown, setSetupShown] = useState(false);\n  const [dataLoading, setDataLoading] = useState(false);\n  const [theme, setTheme] = useState('light');\n  const [joke, setJoke] = useState({});\n  const [error, setError] = useState(null);\n\n  const categories = ['general', 'programming'];\n  const themes = ['light', 'dark'];\n\n  const handleCategorySwitch = value => {\n    setJokeType(value);\n  };\n\n  const handleThemeSwitch = value => {\n    setTheme(value);\n  };\n\n  const handleButtonClick = () => {\n    updateContent(joke, setupShown, jokeType, error);\n  };\n\n  const getRandomJoke = async jokeType => {\n    const url = getRandomJokeUrl(jokeType);\n    try {\n      const response = await fetch(url);\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      setError(error);\n    } finally {\n    }\n  };\n\n  const getRandomJokeUrl = (jokeType = 'general') => {\n    return `https://official-joke-api.appspot.com/jokes/${jokeType}/random`;\n  };\n\n  const updateContent = async (joke, setup, jokeType, error) => {\n    let newContent;\n    if (setup) {\n      newContent = joke.punchline;\n    } else if (error) {\n      newContent = error;\n    } else {\n      const [newJoke] = await getRandomJoke(jokeType);\n      newContent = newJoke.setup;\n      setJoke(newJoke);\n      setJokesShown(jokesShown => jokesShown + 1);\n    }\n    setSetupShown(!setupShown);\n    setContent(newContent);\n  };\n\n  return (\n    <div class={`${style.app} ${theme === 'dark' ? style.themeDark : style.themeLight}`}>\n      <Title text=\"Good Mood\" />\n      <div class={style.configBar}>\n        <TypeSwitch\n          legend=\"Jokes category:\"\n          handleSwitch={handleCategorySwitch}\n          types={categories}\n          name=\"joke-type\"\n          currentType={jokeType}\n        />\n        <TypeSwitch\n          legend=\"Theme:\"\n          handleSwitch={handleThemeSwitch}\n          types={themes}\n          name=\"theme\"\n          currentType={theme}\n        />\n      </div>\n      <JokeBlock dataLoading={dataLoading} jokeText={content} jokeType={jokeType} />\n      <Button text={setupShown ? 'Punchline' : 'New Joke'} handleClick={handleButtonClick} />\n      <Counter jokesShown={jokesShown} />\n    </div>\n  );\n}\n\nexport default App;\n","import App from './components/App';\nimport { render } from './framework';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nrender(App, document.getElementById('app-root'));\n"]}