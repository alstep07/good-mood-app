{"version":3,"sources":["index.js"],"names":["App","setupShown","jokesShown","jokeText","jokesType","style","app","appTitle","TypeSwitch","JokeText","Button","Counter","LoadIcon","loadIcon","jokeType","content","dataStore","isDataLoading","error","isDataLoaded","joke","programming","jokeUnderscore","setup","appButton","map","type","changeJokesType","join","getRandomJoke","url","getRandomJokeUrl","response","fetch","result","json","currentJoke","punchline","inputValue","showRandomJoke","newJoke","shownIds","includes","id","renderApp","showPunchLine","document","getElementById","innerHTML","module","hot","accept","window"],"mappings":";;;AAiJC,aAhJD,IAAA,EAAA,EAAA,QAAA,gBAgJC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAxHD,SAASA,GAAI,WAAEC,EAAF,WAAcC,EAAd,SAA0BC,EAA1B,UAAoCC,IACvC,2BACQC,EAAMC,QAAAA,0BACND,EAAME,QAAAA,sCAChBC,cACAC,EAASN,EAAUC,aACnBM,EAAOT,aACPU,EAAQT,qBAKhB,SAASU,IACC,2BACQP,EAAMQ,QAAAA,gDAIxB,SAASJ,EAASN,EAAUW,GACtBC,IAAAA,EAAUZ,GAAY,kCAclB,OAZJa,UAAUC,gBACZF,EAAUH,KAGRI,UAAUE,QACZH,EAAUC,UAAUE,OAGlBC,MACFJ,EAAUZ,wBAIIE,EAAMe,QAAAA,QAAqB,gBAAbN,GAA8BT,EAAMgB,QAAAA,kCAClDhB,EAAMF,QAAAA,aAAaY,iBAAuBV,EAAMiB,QAAAA,wDAKlE,SAASZ,EAAOa,GACPA,OAAAA,oBACelB,EAAMmB,QAAAA,0EACNnB,EAAMmB,QAAAA,0DAG9B,SAASb,EAAQT,GACP,gCAAyBA,QAGnC,SAASM,IACC,kDAEJ,CAAC,UAAW,eACXiB,IACCC,mDAGUA,uFAGOC,8BACXX,UAAUZ,YAAcsB,EAAO,UAAY,oBAC3CA,mCAIPE,KAAK,UAIZ,eAAeC,EAAcf,GACrBgB,MAAAA,EAAMC,EAAiBjB,GACzB,IACIkB,MAAAA,QAAiBC,MAAMH,GAEtBI,aADcF,EAASG,OAE9B,MAAOjB,GACPF,UAAUE,MAAQA,GAItB,SAASC,IACAH,OAAAA,UAAUb,UAAYa,UAAUoB,YAAYC,YAAcrB,UAAUb,SAG7E,SAAS4B,EAAiBjB,GAChB,qDAA8CA,WAGxD,SAASa,EAAgBW,GACvBtB,UAAUZ,UAAYkC,EAGxB,eAAeC,IAETC,IAAAA,EACG,IAFPxB,UAAUC,eAAgB,GAElBuB,GAAWxB,UAAUyB,SAASC,SAASF,EAAQG,KACrDC,KACCJ,SAAiBX,EAAcb,UAAUZ,WAE5CY,UAAUyB,SAAW,IAAIzB,UAAUyB,SAAUD,EAAQG,IACrD3B,UAAUoB,YAAcI,EACxBxB,UAAUb,SAAWa,UAAUoB,YAAYb,MAC3CP,UAAUf,YAAa,EACvBe,UAAUd,aACVc,UAAUC,eAAgB,EAC1B2B,IAGF,SAASC,IACP7B,UAAUb,SAAWa,UAAUoB,YAAYC,UAC3CrB,UAAUf,YAAa,EACvB2C,IAGF,SAASA,IACPE,SAASC,eAAe,YAAYC,mBAChChD,EAAIgB,iBA5INiC,OAAOC,KACTD,OAAOC,IAAIC,SAGbC,OAAOpC,UAAY,CACjBf,YAAY,EACZmC,YAAa,GACbjC,SAAU,GACVD,WAAY,EACZE,UAAW,UACXqC,SAAU,GACVvB,MAAO,KACPD,eAAe,GAGjBmC,OAAOR,UAAYA,EACnBQ,OAAOP,cAAgBA,EACvBO,OAAOb,eAAiBA,EACxBa,OAAOzB,gBAAkBA,EAEzBmB,SAASC,eAAe,YAAYC,UAAYhD,EAAIgB","file":"good-mood.11908bc6.js","sourceRoot":"..","sourcesContent":["/* eslint-disable no-console */\nimport style from './style.css';\n\nif (module.hot) {\n  module.hot.accept();\n}\n\nwindow.dataStore = {\n  setupShown: false,\n  currentJoke: '',\n  jokeText: '',\n  jokesShown: 0,\n  jokesType: 'general',\n  shownIds: [],\n  error: null,\n  isDataLoading: false,\n};\n\nwindow.renderApp = renderApp;\nwindow.showPunchLine = showPunchLine;\nwindow.showRandomJoke = showRandomJoke;\nwindow.changeJokesType = changeJokesType;\n\ndocument.getElementById('app-root').innerHTML = App(dataStore);\n\nfunction App({ setupShown, jokesShown, jokeText, jokesType }) {\n  return `\n    <div class=\"${style.app}\">\n      <h1 class=${style.appTitle}>Good Mood App</h1>\n      ${TypeSwitch()}\n      ${JokeText(jokeText, jokesType)}\n      ${Button(setupShown)}\n      ${Counter(jokesShown)}\n    </div>\n  `;\n}\n\nfunction LoadIcon() {\n  return `\n    <img class=\"${style.loadIcon}\" src=\"./load.gif\" alt=\"loading\">\n  `;\n}\n\nfunction JokeText(jokeText, jokeType) {\n  let content = jokeText || 'Click the button to get a joke!';\n\n  if (dataStore.isDataLoading) {\n    content = LoadIcon();\n  }\n\n  if (dataStore.error) {\n    content = dataStore.error;\n  }\n\n  if (isDataLoaded()) {\n    content = jokeText;\n  }\n\n  return `\n    <div class=\"${style.joke} ${jokeType === 'programming' && style.programming}\">\n      <p class=\"${style.jokeText}\">${content}<span class=\"${style.jokeUnderscore}\">&nbsp;</span>\n      </p>\n    </div>`;\n}\n\nfunction Button(setup) {\n  return setup\n    ? `<button class=\"${style.appButton}\" onclick=showPunchLine()>Punchline</button>`\n    : `<button class=\"${style.appButton}\" onclick=showRandomJoke()>Get a joke</button>`;\n}\n\nfunction Counter(jokesShown) {\n  return `<p>Already read jokes: ${jokesShown}</p>`;\n}\n\nfunction TypeSwitch() {\n  return `\n    <p>Choose jokes category:</p>\n    ${['general', 'programming']\n      .map(\n        type =>\n          `<label>\n            <input\n            id='${type}'\n            type='radio'\n            name='jokes-type'\n            onchange='(${changeJokesType})(this.id);'\n            ${dataStore.jokesType === type ? 'checked' : ''}>\n            ${type}\n          </label>\n        `,\n      )\n      .join('')}\n  `;\n}\n\nasync function getRandomJoke(jokeType) {\n  const url = getRandomJokeUrl(jokeType);\n  try {\n    const response = await fetch(url);\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    dataStore.error = error;\n  }\n}\n\nfunction isDataLoaded() {\n  return dataStore.jokeText && dataStore.currentJoke.punchline !== dataStore.jokeText;\n}\n\nfunction getRandomJokeUrl(jokeType) {\n  return `https://official-joke-api.appspot.com/jokes/${jokeType}/random`;\n}\n\nfunction changeJokesType(inputValue) {\n  dataStore.jokesType = inputValue;\n}\n\nasync function showRandomJoke() {\n  dataStore.isDataLoading = true;\n  let newJoke;\n  while (!newJoke || dataStore.shownIds.includes(newJoke.id)) {\n    renderApp();\n    [newJoke] = await getRandomJoke(dataStore.jokesType);\n  }\n  dataStore.shownIds = [...dataStore.shownIds, newJoke.id];\n  dataStore.currentJoke = newJoke;\n  dataStore.jokeText = dataStore.currentJoke.setup;\n  dataStore.setupShown = true;\n  dataStore.jokesShown++;\n  dataStore.isDataLoading = false;\n  renderApp();\n}\n\nfunction showPunchLine() {\n  dataStore.jokeText = dataStore.currentJoke.punchline;\n  dataStore.setupShown = false;\n  renderApp();\n}\n\nfunction renderApp() {\n  document.getElementById('app-root').innerHTML = `\n    ${App(dataStore)}\n  `;\n}\n"]}